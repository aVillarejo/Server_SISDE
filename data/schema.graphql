# USUARIOS
type Usuario {
  id: ID
  nombre: String
  usuario: String
  password: String
  tipo: TipoUsuario
  status: Boolean
}

enum TipoUsuario {
  ALUMNO
  CONSULTOR
  ADMINISTRADOR
}

input UsuarioInput {
  id: ID
  nombre: String!
  usuario: String!
  password: String!
  tipo: TipoUsuario!
  status: Boolean!
}

# GIRO
type Giro {
  id: ID
  nombre: String!
  descripcion: String!
}

input GiroInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# Forma Juridica
type FormaJuridica {
  id: ID
  nombre: String!
  descripcion: String!
}
input FormaJuridicaInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# Grado
type Grado {
  id: ID
  nombre: String!
  descripcion: String!
}
input GradoInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# AmbitoEstatal
type AmbitoEstatal {
  id: ID
  nombre: String!
  descripcion: String!
}
input AmbitoEstatalInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# Impuestos
type Impuesto {
  id: ID
  nombre: String!
  descripcion: String!
}
input ImpuestoInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# Contabilidad
type Contabilidad {
  id: ID
  nombre: String!
  descripcion: String!
}
input ContabilidadInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# Tendencias
type Tendencia {
  id: ID
  nombre: String!
  descripcion: String!
}
input TendenciaInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# Comercializacion
type Comercializacion {
  id: ID
  nombre: String!
  descripcion: String!
}
input ComercializacionInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# Departamentos
type Departamento {
  id: ID
  nombre: String!
  descripcion: String!
}
input DepartamentoInput {
  id: ID
  nombre: String!
  descripcion: String!
}

# Empresa
# type Empresa {
#   id: ID
#   nombre: String
#   RFC: String
#   tipoEmpresa: String
#   tiempoOperacion: String
#   Persona: String # f√≠sica o moral
#   regimenFiscal: String
#   marca: String
#   licenciaAyuntamiento: String
#   sectorEconomico: String
#   giro: String
#   formaJuridica: String
#   gradoParticipacion: String
#   ambitoEstatal: String
#   ClasificacionEmpresa: String
#   impuestos: Float
#   tipoContabilidad: String
#   capital: Float
#   tendenciaFinancieras: String
#   tipoComercializacion: String
#   departamentos: String
# }
# input EmpresaInput {
#   id: ID
# }

# str
# type str {
#   id: ID
#   nombre: String!
#   descripcion: String!
# }
# input strInput {
#   id: ID
#   nombre: String!
#   descripcion: String!
# }

type Query {
  # Usuarios
  getUsuarios(limite: Int, offset: Int): [Usuario]
  getUsuario(id: ID!): Usuario
  totalUsuarios: String
  # Giros
  getGiros(limite: Int, offset: Int): [Giro]
  getGiro(id: ID!): Giro
  totalGiros: String
  # FormaJuridica
  getFormaJuridicas(limite: Int, offset: Int): [FormaJuridica]
  getFormaJuridica(id: ID!): FormaJuridica
  totalFormaJuridicas: String
  # Grado
  getGrados(limite: Int, offset: Int): [Grado]
  getGrado(id: ID!): Grado
  totalGrados: String
  # AmbitoEstatal
  getAmbitoEstatals(limite: Int, offset: Int): [AmbitoEstatal]
  getAmbitoEstatal(id: ID!): AmbitoEstatal
  totalAmbitoEstatals: String
  # Impuesto
  getImpuestos(limite: Int, offset: Int): [Impuesto]
  getImpuesto(id: ID!): Impuesto
  totalImpuestos: String
  # Contabilidad
  getContabilidads(limite: Int, offset: Int): [Contabilidad]
  getContabilidad(id: ID!): Contabilidad
  totalContabilidads: String
  # Tendencia
  getTendencias(limite: Int, offset: Int): [Tendencia]
  getTendencia(id: ID!): Tendencia
  totalTendencias: String
  # Comercializacion
  getComercializacions(limite: Int, offset: Int): [Comercializacion]
  getComercializacion(id: ID!): Comercializacion
  totalComercializacions: String
  # Departamento
  getDepartamentos(limite: Int, offset: Int): [Departamento]
  getDepartamento(id: ID!): Departamento
  totalDepartamentos: String
  # mmm
  # getmmms(limite: Int, offset: Int): [mmm]
  # getmmm(id: ID!): mmm
  # totalmmms: String

  
}

type Mutation {
  # Usuarios
  crearUsuario(input: UsuarioInput): Usuario
  actualizarUsuario(input: UsuarioInput): Usuario
  eliminarUsuario(id: ID!): String

  # Giros
  crearGiro(input: GiroInput): Giro
  actualizarGiro(input: GiroInput): Giro
  eliminarGiro(id: ID!): String

  # FormaJuridica
  crearFormaJuridica(input: FormaJuridicaInput): FormaJuridica
  actualizarFormaJuridica(input: FormaJuridicaInput): FormaJuridica
  eliminarFormaJuridica(id: ID!): String

  # Grado
  crearGrado(input: GradoInput): Grado
  actualizarGrado(input: GradoInput): Grado
  eliminarGrado(id: ID!): String

  # AmbitoEstatal
  crearAmbitoEstatal(input: AmbitoEstatalInput): AmbitoEstatal
  actualizarAmbitoEstatal(input: AmbitoEstatalInput): AmbitoEstatal
  eliminarAmbitoEstatal(id: ID!): String

  # Impuestos
  crearImpuesto(input: ImpuestoInput): Impuesto
  actualizarImpuesto(input: ImpuestoInput): Impuesto
  eliminarImpuesto(id: ID!): String

  # Contabilidad
  crearContabilidad(input: ContabilidadInput): Contabilidad
  actualizarContabilidad(input: ContabilidadInput): Contabilidad
  eliminarContabilidad(id: ID!): String

  # Tendencias
  crearTendencia(input: TendenciaInput): Tendencia
  actualizarTendencia(input: TendenciaInput): Tendencia
  eliminarTendencia(id: ID!): String

  # Comercializacion
  crearComercializacion(input: ComercializacionInput): Comercializacion
  actualizarComercializacion(input: ComercializacionInput): Comercializacion
  eliminarComercializacion(id: ID!): String

  # Departamentos
  crearDepartamento(input: DepartamentoInput): Departamento
  actualizarDepartamento(input: DepartamentoInput): Departamento
  eliminarDepartamento(id: ID!): String

  # stm
  # crearstm(input: stmInput): stm
  # actualizarstm(input: stmInput): stm
  # eliminarstm(id: ID!): String
}
